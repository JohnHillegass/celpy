"""
Package checker defines functions to type-checked a parsed expression
against a set of identifier and function declarations.

"""
# python wrapper for package github.com/google/cel-go/checker within overall package checker
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=out github.com/google/cel-go/checker

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
import _checker
os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from checker import checker
# and then refer to everything using checker. prefix
# packages imported by this package listed below:

import go



# ---- Types ---

# Python type for slice []*expr.Decl
class Slice_Ptr_expr_Decl(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Slice_Ptr_expr_Decl_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Iterable):
					raise TypeError('Slice_Ptr_expr_Decl.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Slice_Ptr_expr_Decl len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'checker.Slice_Ptr_expr_Decl([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _checker.Slice_Ptr_expr_Decl_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_expr_Decl(handle=_checker.Slice_Ptr_expr_Decl_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_checker.Slice_Ptr_expr_Decl_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, collections.Iterable):
			raise TypeError('Slice_Ptr_expr_Decl.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _checker.Slice_Ptr_expr_Decl_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_checker.Slice_Ptr_expr_Decl_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []*expr.Decl_FunctionDecl_Overload
class Slice_Ptr_expr_Decl_FunctionDecl_Overload(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Iterable):
					raise TypeError('Slice_Ptr_expr_Decl_FunctionDecl_Overload.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_expr_Decl_FunctionDecl_Overload(handle=_checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, collections.Iterable):
			raise TypeError('Slice_Ptr_expr_Decl_FunctionDecl_Overload.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_checker.Slice_Ptr_expr_Decl_FunctionDecl_Overload_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []*expr.Expr
class Slice_Ptr_expr_Expr(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Slice_Ptr_expr_Expr_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Iterable):
					raise TypeError('Slice_Ptr_expr_Expr.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Slice_Ptr_expr_Expr len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'checker.Slice_Ptr_expr_Expr([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _checker.Slice_Ptr_expr_Expr_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_expr_Expr(handle=_checker.Slice_Ptr_expr_Expr_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_checker.Slice_Ptr_expr_Expr_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, collections.Iterable):
			raise TypeError('Slice_Ptr_expr_Expr.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _checker.Slice_Ptr_expr_Expr_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_checker.Slice_Ptr_expr_Expr_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []*expr.Expr_CreateStruct_Entry
class Slice_Ptr_expr_Expr_CreateStruct_Entry(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Slice_Ptr_expr_Expr_CreateStruct_Entry_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Iterable):
					raise TypeError('Slice_Ptr_expr_Expr_CreateStruct_Entry.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Slice_Ptr_expr_Expr_CreateStruct_Entry len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'checker.Slice_Ptr_expr_Expr_CreateStruct_Entry([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _checker.Slice_Ptr_expr_Expr_CreateStruct_Entry_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_expr_Expr_CreateStruct_Entry(handle=_checker.Slice_Ptr_expr_Expr_CreateStruct_Entry_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_checker.Slice_Ptr_expr_Expr_CreateStruct_Entry_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, collections.Iterable):
			raise TypeError('Slice_Ptr_expr_Expr_CreateStruct_Entry.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _checker.Slice_Ptr_expr_Expr_CreateStruct_Entry_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_checker.Slice_Ptr_expr_Expr_CreateStruct_Entry_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []*expr.Type
class Slice_Ptr_expr_Type(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Slice_Ptr_expr_Type_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Iterable):
					raise TypeError('Slice_Ptr_expr_Type.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Slice_Ptr_expr_Type len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'checker.Slice_Ptr_expr_Type([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _checker.Slice_Ptr_expr_Type_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_expr_Type(handle=_checker.Slice_Ptr_expr_Type_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_checker.Slice_Ptr_expr_Type_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, collections.Iterable):
			raise TypeError('Slice_Ptr_expr_Type.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _checker.Slice_Ptr_expr_Type_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_checker.Slice_Ptr_expr_Type_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for map map[int64]*expr.Expr
class Map_int64_Ptr_expr_Expr(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Map_int64_Ptr_expr_Expr_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Mapping):
					raise TypeError('Map_int64_Ptr_expr_Expr.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_checker.Map_int64_Ptr_expr_Expr_set(self.handle, k, v)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Map_int64_Ptr_expr_Expr len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'checker.Map_int64_Ptr_expr_Expr({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _checker.Map_int64_Ptr_expr_Expr_len(self.handle)
	def __getitem__(self, key):
		return go.Ptr_expr_Expr(handle=_checker.Map_int64_Ptr_expr_Expr_elem(self.handle, key))
	def __setitem__(self, key, value):
		_checker.Map_int64_Ptr_expr_Expr_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _checker.Map_int64_Ptr_expr_Expr_delete(self.handle, key)
	def keys(self):
		return go.Slice_int64(handle=_checker.Map_int64_Ptr_expr_Expr_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _checker.Map_int64_Ptr_expr_Expr_contains(self.handle, key)

# Python type for map map[int64]*expr.Reference
class Map_int64_Ptr_expr_Reference(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Map_int64_Ptr_expr_Reference_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Mapping):
					raise TypeError('Map_int64_Ptr_expr_Reference.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_checker.Map_int64_Ptr_expr_Reference_set(self.handle, k, v)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Map_int64_Ptr_expr_Reference len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'checker.Map_int64_Ptr_expr_Reference({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _checker.Map_int64_Ptr_expr_Reference_len(self.handle)
	def __getitem__(self, key):
		return go.Ptr_expr_Reference(handle=_checker.Map_int64_Ptr_expr_Reference_elem(self.handle, key))
	def __setitem__(self, key, value):
		_checker.Map_int64_Ptr_expr_Reference_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _checker.Map_int64_Ptr_expr_Reference_delete(self.handle, key)
	def keys(self):
		return go.Slice_int64(handle=_checker.Map_int64_Ptr_expr_Reference_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _checker.Map_int64_Ptr_expr_Reference_contains(self.handle, key)

# Python type for map map[int64]*expr.Type
class Map_int64_Ptr_expr_Type(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Map_int64_Ptr_expr_Type_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Mapping):
					raise TypeError('Map_int64_Ptr_expr_Type.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_checker.Map_int64_Ptr_expr_Type_set(self.handle, k, v)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Map_int64_Ptr_expr_Type len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'checker.Map_int64_Ptr_expr_Type({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _checker.Map_int64_Ptr_expr_Type_len(self.handle)
	def __getitem__(self, key):
		return go.Ptr_expr_Type(handle=_checker.Map_int64_Ptr_expr_Type_elem(self.handle, key))
	def __setitem__(self, key, value):
		_checker.Map_int64_Ptr_expr_Type_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _checker.Map_int64_Ptr_expr_Type_delete(self.handle, key)
	def keys(self):
		return go.Slice_int64(handle=_checker.Map_int64_Ptr_expr_Type_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _checker.Map_int64_Ptr_expr_Type_contains(self.handle, key)

# Python type for map map[int64]int32
class Map_int64_int32(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.Map_int64_int32_CTor()
			_checker.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Mapping):
					raise TypeError('Map_int64_int32.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_checker.Map_int64_int32_set(self.handle, k, v)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		s = 'checker.Map_int64_int32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'checker.Map_int64_int32({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _checker.Map_int64_int32_len(self.handle)
	def __getitem__(self, key):
		return _checker.Map_int64_int32_elem(self.handle, key)
	def __setitem__(self, key, value):
		_checker.Map_int64_int32_set(self.handle, key, value)
	def __delitem__(self, key):
		return _checker.Map_int64_int32_delete(self.handle, key)
	def keys(self):
		return go.Slice_int64(handle=_checker.Map_int64_int32_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _checker.Map_int64_int32_contains(self.handle, key)


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct checker.Env
class Env(go.GoClass):
	"""Env is the environment for type checking.\nIt consists of a Packager, a Type Provider, declarations, and collection of errors encountered\nduring checking.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_checker.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_checker.IncRef(self.handle)
		else:
			self.handle = _checker.checker_Env_CTor()
			_checker.IncRef(self.handle)
	def __del__(self):
		_checker.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'checker.Env{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'checker.Env ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def EnableDynamicAggregateLiterals(self, enabled):
		"""EnableDynamicAggregateLiterals(bool enabled) object
		
		EnableDynamicAggregateLiterals detmerines whether list and map literals may support mixed
		element types at check-time. This does not preclude the presence of a dynamic list or map
		somewhere in the CEL evaluation process.
		"""
		return Env(handle=_checker.checker_Env_EnableDynamicAggregateLiterals(self.handle, enabled))
	def LookupIdent(self, name):
		"""LookupIdent(str name) object
		
		LookupIdent returns a Decl proto for typeName as an identifier in the Env.
		Returns nil if no such identifier is found in the Env.
		"""
		return go.Ptr_expr_Decl(handle=_checker.checker_Env_LookupIdent(self.handle, name))
	def LookupFunction(self, name):
		"""LookupFunction(str name) object
		
		LookupFunction returns a Decl proto for typeName as a function in env.
		Returns nil if no such function is found in env.
		"""
		return go.Ptr_expr_Decl(handle=_checker.checker_Env_LookupFunction(self.handle, name))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewEnv(packager, provider):
	"""NewEnv(object packager, object provider) object
	
	NewEnv returns a new *Env with the given parameters.
	"""
	return Env(handle=_checker.checker_NewEnv(packager.handle, provider.handle))
def NewStandardEnv(packager, provider):
	"""NewStandardEnv(object packager, object provider) object
	
	NewStandardEnv returns a new *Env with the given params plus standard declarations.
	"""
	return Env(handle=_checker.checker_NewStandardEnv(packager.handle, provider.handle))


# ---- Functions ---
def Print(e, checks):
	"""Print(object e, object checks) str
	
	Print returns a string representation of the Expr message,
	annotated with types from the CheckedExpr.  The Expr must
	be a sub-expression embedded in the CheckedExpr.
	"""
	return _checker.checker_Print(e.handle, checks.handle)
def StandardDeclarations():
	"""StandardDeclarations() []object
	
	StandardDeclarations returns the Decls for all functions and constants in the evaluator.
	"""
	return Slice_Ptr_expr_Decl(handle=_checker.checker_StandardDeclarations())
def FormatCheckedType(t):
	"""FormatCheckedType(object t) str
	
	FormatCheckedType converts a type message into a string representation.
	"""
	return _checker.checker_FormatCheckedType(t.handle)


