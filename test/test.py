
# python wrapper for package github.com/google/cel-go/test within overall package test
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=test github.com/google/cel-go/test

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
import _test
os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from test import test
# and then refer to everything using test. prefix
# packages imported by this package listed below:

import go



# ---- Types ---

# Python type for slice []*expr.Expr
class Slice_Ptr_expr_Expr(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_test.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_test.IncRef(self.handle)
		else:
			self.handle = _test.Slice_Ptr_expr_Expr_CTor()
			_test.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Iterable):
					raise TypeError('Slice_Ptr_expr_Expr.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_test.DecRef(self.handle)
	def __str__(self):
		s = 'test.Slice_Ptr_expr_Expr len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'test.Slice_Ptr_expr_Expr([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _test.Slice_Ptr_expr_Expr_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_expr_Expr(handle=_test.Slice_Ptr_expr_Expr_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_test.Slice_Ptr_expr_Expr_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, collections.Iterable):
			raise TypeError('Slice_Ptr_expr_Expr.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _test.Slice_Ptr_expr_Expr_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_test.Slice_Ptr_expr_Expr_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []*expr.Expr_CreateStruct_Entry
class Slice_Ptr_expr_Expr_CreateStruct_Entry(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_test.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_test.IncRef(self.handle)
		else:
			self.handle = _test.Slice_Ptr_expr_Expr_CreateStruct_Entry_CTor()
			_test.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Iterable):
					raise TypeError('Slice_Ptr_expr_Expr_CreateStruct_Entry.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_test.DecRef(self.handle)
	def __str__(self):
		s = 'test.Slice_Ptr_expr_Expr_CreateStruct_Entry len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'test.Slice_Ptr_expr_Expr_CreateStruct_Entry([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _test.Slice_Ptr_expr_Expr_CreateStruct_Entry_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_expr_Expr_CreateStruct_Entry(handle=_test.Slice_Ptr_expr_Expr_CreateStruct_Entry_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_test.Slice_Ptr_expr_Expr_CreateStruct_Entry_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, collections.Iterable):
			raise TypeError('Slice_Ptr_expr_Expr_CreateStruct_Entry.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _test.Slice_Ptr_expr_Expr_CreateStruct_Entry_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_test.Slice_Ptr_expr_Expr_CreateStruct_Entry_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for map map[int64]*expr.Expr
class Map_int64_Ptr_expr_Expr(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_test.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_test.IncRef(self.handle)
		else:
			self.handle = _test.Map_int64_Ptr_expr_Expr_CTor()
			_test.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Mapping):
					raise TypeError('Map_int64_Ptr_expr_Expr.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_test.Map_int64_Ptr_expr_Expr_set(self.handle, k, v)
	def __del__(self):
		_test.DecRef(self.handle)
	def __str__(self):
		s = 'test.Map_int64_Ptr_expr_Expr len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'test.Map_int64_Ptr_expr_Expr({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _test.Map_int64_Ptr_expr_Expr_len(self.handle)
	def __getitem__(self, key):
		return go.Ptr_expr_Expr(handle=_test.Map_int64_Ptr_expr_Expr_elem(self.handle, key))
	def __setitem__(self, key, value):
		_test.Map_int64_Ptr_expr_Expr_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _test.Map_int64_Ptr_expr_Expr_delete(self.handle, key)
	def keys(self):
		return go.Slice_int64(handle=_test.Map_int64_Ptr_expr_Expr_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _test.Map_int64_Ptr_expr_Expr_contains(self.handle, key)

# Python type for map map[int64]int32
class Map_int64_int32(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_test.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_test.IncRef(self.handle)
		else:
			self.handle = _test.Map_int64_int32_CTor()
			_test.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], collections.Mapping):
					raise TypeError('Map_int64_int32.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_test.Map_int64_int32_set(self.handle, k, v)
	def __del__(self):
		_test.DecRef(self.handle)
	def __str__(self):
		s = 'test.Map_int64_int32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'test.Map_int64_int32({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _test.Map_int64_int32_len(self.handle)
	def __getitem__(self, key):
		return _test.Map_int64_int32_elem(self.handle, key)
	def __setitem__(self, key, value):
		_test.Map_int64_int32_set(self.handle, key, value)
	def __delitem__(self, key):
		return _test.Map_int64_int32_delete(self.handle, key)
	def keys(self):
		return go.Slice_int64(handle=_test.Map_int64_int32_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _test.Map_int64_int32_contains(self.handle, key)


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---
def Conditional():
	"""
	Conditional Gets Go Variable: test.Conditional
	
	"""
	return TestExpr(handle=_test.test_Conditional())

def Set_Conditional(value):
	"""
	Set_Conditional Sets Go Variable: test.Conditional
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_Conditional(value.handle)
	else:
		_test.test_Set_Conditional(value)

def DynMap():
	"""
	DynMap Gets Go Variable: test.DynMap
	
	"""
	return TestExpr(handle=_test.test_DynMap())

def Set_DynMap(value):
	"""
	Set_DynMap Sets Go Variable: test.DynMap
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_DynMap(value.handle)
	else:
		_test.test_Set_DynMap(value)

def Empty():
	"""
	Empty Gets Go Variable: test.Empty
	
	"""
	return TestExpr(handle=_test.test_Empty())

def Set_Empty(value):
	"""
	Set_Empty Sets Go Variable: test.Empty
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_Empty(value.handle)
	else:
		_test.test_Set_Empty(value)

def Equality():
	"""
	Equality Gets Go Variable: test.Equality
	
	"""
	return TestExpr(handle=_test.test_Equality())

def Set_Equality(value):
	"""
	Set_Equality Sets Go Variable: test.Equality
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_Equality(value.handle)
	else:
		_test.test_Set_Equality(value)

def Exists():
	"""
	Exists Gets Go Variable: test.Exists
	
	"""
	return TestExpr(handle=_test.test_Exists())

def Set_Exists(value):
	"""
	Set_Exists Sets Go Variable: test.Exists
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_Exists(value.handle)
	else:
		_test.test_Set_Exists(value)

def ExistsWithInput():
	"""
	ExistsWithInput Gets Go Variable: test.ExistsWithInput
	
	"""
	return TestExpr(handle=_test.test_ExistsWithInput())

def Set_ExistsWithInput(value):
	"""
	Set_ExistsWithInput Sets Go Variable: test.ExistsWithInput
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_ExistsWithInput(value.handle)
	else:
		_test.test_Set_ExistsWithInput(value)

def LogicalAnd():
	"""
	LogicalAnd Gets Go Variable: test.LogicalAnd
	
	"""
	return TestExpr(handle=_test.test_LogicalAnd())

def Set_LogicalAnd(value):
	"""
	Set_LogicalAnd Sets Go Variable: test.LogicalAnd
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_LogicalAnd(value.handle)
	else:
		_test.test_Set_LogicalAnd(value)

def LogicalAndMissingType():
	"""
	LogicalAndMissingType Gets Go Variable: test.LogicalAndMissingType
	
	"""
	return TestExpr(handle=_test.test_LogicalAndMissingType())

def Set_LogicalAndMissingType(value):
	"""
	Set_LogicalAndMissingType Sets Go Variable: test.LogicalAndMissingType
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_LogicalAndMissingType(value.handle)
	else:
		_test.test_Set_LogicalAndMissingType(value)

def LogicalOr():
	"""
	LogicalOr Gets Go Variable: test.LogicalOr
	
	"""
	return TestExpr(handle=_test.test_LogicalOr())

def Set_LogicalOr(value):
	"""
	Set_LogicalOr Sets Go Variable: test.LogicalOr
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_LogicalOr(value.handle)
	else:
		_test.test_Set_LogicalOr(value)

def LogicalOrEquals():
	"""
	LogicalOrEquals Gets Go Variable: test.LogicalOrEquals
	
	"""
	return TestExpr(handle=_test.test_LogicalOrEquals())

def Set_LogicalOrEquals(value):
	"""
	Set_LogicalOrEquals Sets Go Variable: test.LogicalOrEquals
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_LogicalOrEquals(value.handle)
	else:
		_test.test_Set_LogicalOrEquals(value)

def Select():
	"""
	Select Gets Go Variable: test.Select
	
	"""
	return TestExpr(handle=_test.test_Select())

def Set_Select(value):
	"""
	Set_Select Sets Go Variable: test.Select
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_Select(value.handle)
	else:
		_test.test_Set_Select(value)

def TypeEquality():
	"""
	TypeEquality Gets Go Variable: test.TypeEquality
	
	"""
	return TestExpr(handle=_test.test_TypeEquality())

def Set_TypeEquality(value):
	"""
	Set_TypeEquality Sets Go Variable: test.TypeEquality
	
	"""
	if isinstance(value, go.GoClass):
		_test.test_Set_TypeEquality(value.handle)
	else:
		_test.test_Set_TypeEquality(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct test.TestExpr
class TestExpr(go.GoClass):
	"""TestExpr packages an Expr with SourceInfo, for testing.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_test.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_test.IncRef(self.handle)
		else:
			self.handle = _test.test_TestExpr_CTor()
			_test.IncRef(self.handle)
			if  0 < len(args):
				self.Expr = args[0]
			if "Expr" in kwargs:
				self.Expr = kwargs["Expr"]
			if  1 < len(args):
				self.SourceInfo = args[1]
			if "SourceInfo" in kwargs:
				self.SourceInfo = kwargs["SourceInfo"]
	def __del__(self):
		_test.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'test.TestExpr{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'test.TestExpr ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Expr(self):
		return go.Ptr_expr_Expr(handle=_test.test_TestExpr_Expr_Get(self.handle))
	@Expr.setter
	def Expr(self, value):
		if isinstance(value, go.GoClass):
			_test.test_TestExpr_Expr_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def SourceInfo(self):
		return go.Ptr_expr_SourceInfo(handle=_test.test_TestExpr_SourceInfo_Get(self.handle))
	@SourceInfo.setter
	def SourceInfo(self, value):
		if isinstance(value, go.GoClass):
			_test.test_TestExpr_SourceInfo_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def Info(self, location):
		"""Info(str location) object
		
		Info returns a copy of the SourceInfo with the given location.
		"""
		return go.Ptr_expr_SourceInfo(handle=_test.test_TestExpr_Info(self.handle, location))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def Compare(a, e):
	"""Compare(str a, str e) bool
	
	Compare compares two strings, a for actual, e for expected, and returns true or false. The comparison is done,
	by filtering out whitespace (i.e. space, tabs and newline).
	"""
	return _test.test_Compare(a, e)
def DiffMessage(context, actual, expected):
	"""DiffMessage(str context, str actual, str expected) str
	
	DiffMessage creates a diff dump message for test failures.
	"""
	return _test.test_DiffMessage(context, actual, expected)
def ExprComprehension(id, iterVar, iterRange, accuVar, accuInit, loopCondition, loopStep, resultExpr):
	"""ExprComprehension(long id, str iterVar, object iterRange, str accuVar, object accuInit, object loopCondition, object loopStep, object resultExpr) object
	
	ExprComprehension returns a comprehension Expr.
	"""
	return go.Ptr_expr_Expr(handle=_test.test_ExprComprehension(id, iterVar, iterRange.handle, accuVar, accuInit.handle, loopCondition.handle, loopStep.handle, resultExpr.handle))
def ExprEntry(id, key, value):
	"""ExprEntry(long id, object key, object value) object
	
	ExprEntry creates a map entry for a create struct Expr.
	"""
	return go.Ptr_expr_Expr_CreateStruct_Entry(handle=_test.test_ExprEntry(id, key.handle, value.handle))
def ExprField(id, field, value):
	"""ExprField(long id, str field, object value) object
	
	ExprField creates a field entry for a create struct Expr.
	"""
	return go.Ptr_expr_Expr_CreateStruct_Entry(handle=_test.test_ExprField(id, field, value.handle))
def ExprIdent(id, name):
	"""ExprIdent(long id, str name) object
	
	ExprIdent creates an ident (variable) Expr.
	"""
	return go.Ptr_expr_Expr(handle=_test.test_ExprIdent(id, name))
def ExprLiteral(id, value):
	"""ExprLiteral(long id, str value) object
	
	ExprLiteral creates a literal (constant) Expr.
	"""
	return go.Ptr_expr_Expr(handle=_test.test_ExprLiteral(id, value))
def ExprSelect(id, operand, field):
	"""ExprSelect(long id, object operand, str field) object
	
	ExprSelect creates a select Expr.
	"""
	return go.Ptr_expr_Expr(handle=_test.test_ExprSelect(id, operand.handle, field))


